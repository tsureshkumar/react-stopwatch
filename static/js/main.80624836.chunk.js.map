{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["keyDowns$","rx","document","keyUps$","pipe","map","e","distinctUntilChanged","subscribe","console","log","type","key","Status","TimerNumberDisplay","timer","date","style","Date","setUTCMilliseconds","sep","className","getUTCHours","slice","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","TimerVerboseDisplay","datestr","Timer","LapC","lap","end","start","LapPanel","idx","TimerApp","useTheme","useState","updateTimer","laps","updateLaps","control","callback","delay","PAUSED","status","updateStatus","tick","useRef","x","timerRef","useEffect","current","RUNNING","interval","setInterval","clearInterval","pause","stop","STOPPED","reset","this","useInterval","elapsed","sub","lapsLocal","last","_","push","unsubscribe","lapsComps","i","lapTimer","length","controls","IconButton","aria-label","onClick","c","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.80624836.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { Fragment, useEffect, useState, useRef } from \"react\";\nimport * as rx from \"rxjs\";\nimport { map, distinctUntilChanged } from \"rxjs/operators\";\nimport * as _ from \"lodash\";\nimport \"./App.scss\";\nimport { makeStyles, useTheme, createStyles } from \"@material-ui/core/styles\";\nimport { IconButton } from \"@material-ui/core\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport StopIcon from \"@material-ui/icons/Stop\";\nimport PauseIcon from \"@material-ui/icons/Pause\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nconst keyDowns$ = rx.fromEvent(document, \"keydown\");\nconst keyUps$ = rx.fromEvent(document, \"keyup\");\nconst keyActions$ = rx.merge(keyDowns$, keyUps$).pipe(\n  map((e: Event) => e as KeyboardEvent),\n  distinctUntilChanged()\n);\n\nkeyUps$\n  .pipe(map(e => e as KeyboardEvent))\n  .subscribe(function(e: KeyboardEvent) {\n    console.log(e.type, e.key);\n  });\n\nconst interval$ = rx.interval(300);\nconst timer$ = new rx.Subject();\n\nconst TimerNumberDisplay = ({\n  timer,\n  style\n}: {\n  timer: number;\n  style?: string;\n}) => {\n  const date = new Date(0);\n  date.setUTCMilliseconds(timer);\n  const sep = [\":\", \":\"];\n  return (\n    <div className=\"timer\">\n      <div className=\"hours\">{`${(\"00\" + date.getUTCHours()).slice(-2)}`}</div>\n      <div className=\"sep\">{sep[0]}</div>\n      <div className=\"minutes\">{`${(\"00\" + date.getUTCMinutes()).slice(-2)}`} </div>\n      <div className=\"sep\">{sep[1]}</div>\n      <div className=\"seconds\">{`${(\"00\" + date.getUTCSeconds()).slice(-2)}`}</div>\n      <div className=\"millis\">{`${(\"0000\" + date.getUTCMilliseconds()).slice(-3)}`}</div>\n    </div>\n  );\n};\n\nconst TimerVerboseDisplay = ({\n  timer,\n  style\n}: {\n  timer: number;\n  style?: string;\n}) => {\n  const date = new Date(0);\n  date.setUTCMilliseconds(timer);\n  let datestr = ``;\n  if (date.getUTCHours() > 0) datestr += `${date.getUTCHours()} hours `;\n  if (date.getUTCMinutes() > 0) datestr += `${date.getUTCMinutes()} mins `;\n  datestr += `${date.getUTCSeconds()} secs`;\n  return <div className=\"verboseTimer\">{datestr}</div>;\n};\n\nconst Timer = ({ timer, style }: { timer: number; style?: string }) => {\n  if (style === \"verbose\") {\n    return <TimerVerboseDisplay timer={timer} />;\n  } else {\n    return <TimerNumberDisplay timer={timer} />;\n  }\n};\n\ninterface Lap {\n  start: number;\n  end: number;\n}\n\nconst LapC = ({ lap }: { lap: Lap }) => {\n  return (\n    <div>\n      <Timer timer={lap.end - lap.start} />\n    </div>\n  );\n};\n\nconst LapPanel = ({ lap, idx }: { lap: Lap; idx: number }) => {\n  return (\n    <div className=\"panel\">\n      <div className=\"number\">{idx + 1}</div>\n      <div className=\"time\">\n        <Timer timer={lap.end - lap.start} style=\"verbose\" />\n      </div>\n    </div>\n  );\n};\n\nenum Status {\n  RUNNING = 1,\n  STOPPED,\n  PAUSED\n}\n\nfunction useInterval(callback: (x: number) => any, delay: number) {\n  const [status, updateStatus] = useState(Status.PAUSED);\n  const tick = useRef((x: number) => {});\n  const timerRef = useRef(0);\n  useEffect(() => {\n    tick.current = callback;\n  }, [callback]);\n  useEffect(() => {\n    if (delay && tick.current && status == Status.RUNNING) {\n      const interval = setInterval(() => {\n        timerRef.current += delay;\n        tick.current(timerRef.current);\n      }, delay);\n      return () => clearInterval(interval);\n    }\n  }, [delay, status]);\n  return {\n    status: () => status,\n    pause: () => {\n      if (status === Status.PAUSED) updateStatus(Status.RUNNING);\n      else updateStatus(Status.PAUSED);\n    },\n    stop: () => updateStatus(Status.STOPPED),\n    start: () => updateStatus(Status.RUNNING),\n    reset() {\n      this.pause();\n      timerRef.current = 0;\n      this.stop();\n      this.pause();\n    }\n  };\n}\n\nfunction TimerApp() {\n  const theme = useTheme();\n\n  const [timer, updateTimer] = useState(0);\n  const [laps, updateLaps] = useState([] as Lap[]);\n\n  const control = useInterval((elapsed: number) => {\n    updateTimer(elapsed);\n  }, 300);\n\n  useEffect(() => {\n    const sub = keyUps$\n      .pipe(map(e => e as KeyboardEvent))\n      .subscribe((e: KeyboardEvent) => {\n        switch (e.key) {\n          case \"n\":\n            if (control.status() !== Status.RUNNING) break;\n            const lapsLocal = [...laps];\n            const last = _.last(lapsLocal) || { start: -1, end: -1 };\n            lapsLocal.push({ start: last.end + 1, end: timer });\n            updateLaps(lapsLocal);\n            break;\n          case \" \":\n          case \"p\":\n            control.pause();\n            break;\n          case \"s\":\n            control.stop();\n            break;\n          case \"r\":\n            control.reset();\n            break;\n        }\n      });\n    return () => sub.unsubscribe();\n  }, [timer, laps, control]);\n\n  const lapsComps = laps.map((lap: Lap, i: number) => (\n    <Fragment key={i}>\n      <LapPanel lap={lap} idx={i} />\n    </Fragment>\n  ));\n\n  let lapTimer = <div />;\n  if (laps.length != 0) {\n    const last = _.last(laps) || { start: -1, end: -1 };\n    lapTimer = (\n      <div>\n        <LapC lap={{ start: last.end + 1, end: timer }} />\n      </div>\n    );\n  }\n\n  const controls = [];\n  if (control.status() !== Status.RUNNING)\n    if (control.status() === Status.STOPPED) {\n      controls.push(\n        <IconButton aria-label=\"play/reset\">\n          <RefreshIcon className=\"button\" onClick={() => control.reset()} />\n        </IconButton>\n      );\n    } else\n      controls.push(\n        <IconButton aria-label=\"play/play\">\n          <PlayArrowIcon className=\"button\" onClick={() => control.start()} />\n        </IconButton>\n      );\n  if (control.status() === Status.RUNNING)\n    controls.push(\n      <IconButton aria-label=\"play/pause\">\n        <PauseIcon className=\"button\" onClick={() => control.pause()} />\n      </IconButton>\n    );\n\n  if (control.status() !== Status.STOPPED)\n    controls.push(\n      <IconButton aria-label=\"play/stop\">\n        <StopIcon className=\"button\" onClick={() => control.stop()} />\n      </IconButton>\n    );\n\n  return (\n    <div className=\"timerContainer\">\n      <div className=\"controls\">\n        {controls.map((c, i) => (\n          <Fragment key={i}>{c}</Fragment>\n        ))}\n      </div>\n      <div className=\"timerWithLaps\">\n        <div className=\"mainTimer\">\n          <Timer timer={timer} />\n        </div>\n        {laps.length != 0 && (\n          <div id=\"lapTimer\" className=\"lapTimer\">\n            <div className='title'>Lap {laps.length} </div>\n            <div className='content'>{lapTimer}</div>\n          </div>\n        )}\n        <div className=\"lapsContainer\">{lapsComps}</div>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TimerApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}